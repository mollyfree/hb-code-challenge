
define our variables

answer = random number generated by computer
user_guess = user_input
guesses = array of user inputs
guesses << user_guess
no_of_guesses = guesses.length

is_unique = method that checks new guess against array






rand(1..100)




print "Guess a number from 1 to 100."
user_input = gets.chomp
user_input.int!

#(need to make sure it's an integer?)

guesses = array.length

if user_input > random_number
    puts "Your guess is too high. Guess again!"
elsif user_input < random_number
	puts "Your guess is too low. Guess again!"
elsif user_input = random_number
  puts "Congratulations! It only took you #{guesses} guesses to get it right!"
end



print "Integer please: "
user_num = Integer(gets.chomp)

if user_num < 0
  puts "You picked a negative integer!"
elsif user_num > 0
  puts "You picked a positive integer!"
else
  puts "You picked zero!"
end



#maybe use this to compare numbers to array?

hungry = false

unless hungry
  puts "I'm writing Ruby programs!"
else
  puts "Time to eat!"
end


tired = false

print "Take a nap!" unless tired





if user_input != previous_guess
	then do the rest of this method
else tell them to guess again






array = [user_input 1, user_input 2, etc.]

array.each do |x|
  if x = user_input
  	print "You've already guessed that number. Guess again!"
  else
  	do the method
end




#defining a method:

def prime(n)
  puts "That's not an integer." unless n.is_a? Integer
  is_prime = true
  for i in 2..n-1
    if n % i == 0
      is_prime = false
    end
  end
  if is_prime
    puts "#{n} is prime!"
  else
    puts "#{n} is not prime."
  end
end


#use case statement?

choice = gets.chomp

case choice
when choice > answer
	puts " xxxx "
else
	puts " xxxx "
end


print "Guess a number from 1 to 100."
guess = gets.chomp

case guess
	when guess > answer then puts "Too high. Guess again."
	when guess < answer then puts "Too low. Guess again."
	else puts "Correct! It only took you {#guesscount} guesses!"
end
# but we still have to check for duplicates


#is there a reason to use a hash?

# use concatenation to add to array:

alphabet = ["a", "b", "c"]
alphabet << "d"







puts "Too high! Guess again!" if guess > answer



array = []


#there's something here, i'm not sure what:

prime = Prime.new
  n.times do
    puts prime_array.push(prime.next)
  end
  prime_array
end


#maybe use a proc?





#checks if a number it's passed is less than 100

ages = [23, 101, 7, 104, 11, 94, 100, 121, 101, 70, 44]

under_100 = Proc.new { |x| x < 100 }



answer = rand(1..100)
guesses = []
no_of_guesses = guesses.length

print "Guess a number from 1 to 100."
guess = gets.chomp

def compare(guess)
	if guess > answer	
    	puts "Your guess is too high. Guess again!"
    	guesses << guess
	elsif guess < answer
		puts "Your guess is too low. Guess again!"
		guesses << guess
	else
 		 puts "Congratulations! It only took you #{no_of_guesses} guesses to get it right!"
end

guesses.each do |x|
  if x = guess
  	print "You've already guessed that number. Guess again!"
  else
  	compare(guess)
end






another version:


answer = rand(1..100)
guesses = []
no_of_guesses = guesses.length

print "Guess a number from 1 to 100."
guess = gets.chomp

def unique
    guesses.each do |x|
        if x = guess
            puts "You've already guessed that number. Guess again!"
    end
end

def compare
    if x = guess
  	    puts "You've already guessed that number. Guess again!"
    elsif guess > answer	
    	puts "Your guess is too high. Guess again!"
    	guesses << guess
    elsif guess < answer
		puts "Your guess is too low. Guess again!"
		guesses << guess
	else
 	    puts "Congratulations! It only took you #{no_of_guesses} guesses to get it right!"
    end
end






THIS WORKS:


answer = rand(1..100)
guesses = []
no_of_guesses = guesses.length

print "Guess a number from 1 to 100."
guess = gets.chomp

if guess.to_i > answer	
    puts "Your guess is too high. Guess again!"
	guesses << guess
elsif guess.to_i < answer
    puts "Your guess is too low. Guess again!"
	guesses << guess
else
 	    puts "Congratulations! It only took you #{no_of_guesses} guesses to get it right!"
    end





    answer = rand(1..100)
guesses = []
no_of_guesses = guesses.length

print "Guess a number from 1 to 100."
guess = gets.chomp

if guess.to_i > answer	
    puts "Your guess is too high. Guess again!"
elsif guess.to_i < answer
    puts "Your guess is too low. Guess again!"
else
 	    puts "Congratulations! It only took you #{no_of_guesses} guesses to get it right!"
end
